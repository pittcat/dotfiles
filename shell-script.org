* shell 是什么？ 
  - shell 就是壳，是用来解决用户如何与操作系统通信的问题,可以把 shell 理解为 命令解释器。
    - 命令行：sh bash zsh fish csh tcsh。
    - 图形界面：各种桌面如 kde gnome i3 等等。
* shell 程序(主要介绍命令行的 shell)
  - ash
    - 终端输入 sh 或者/bin/sh 就知道是啥了。
  - bash
    - 如果你们没装 zsh 或者 fish 的话，你们的默认 shell 就是 bash
  - fish
    - 一个开箱即用 shell，缺点是有时候不兼容 bash。
  - zsh
    - oh-my-zsh 搭配插件 zsh-syntax-highlighting zsh-autosuggestions 可以变得很好用(推荐这个)
      
* 内建命令
  - 介绍
    - 内部命令，实际上是 shell 程序的一部分，其中包含的是一些比较简单的 linux 系统命令，这些命令由 shell 程序识别并在 shell 程序内部完成运行。
    - 通常在 linux 系统加载运行时 shell 就被加载并驻留在系统内存中。
    - 内部命令是写在 bashy 源码里面的，其执行速度比外部命令快。比如：exit，history，cd，echo 等。(判断：type cmd)
         #+BEGIN_SRC sh
           type vim
           type pwd
         #+END_SRC

         #+RESULTS:
         | vim | 是 | /usr/bin/vim |      |
         | pwd | 是 | shell        | 内建 |

  - 常见

    - echo/printf
     #+BEGIN_SRC sh
       echo "Hello, Shell"
       printf "Hello, emm"
     #+END_SRC
   
     #+RESULTS:
     | Hello | Shell |
     | Hello | emm   |
     #+BEGIN_SRC sh
      echo "It is a test" > ./test.txt
     #+END_SRC

     #+RESULTS:

    - cd/pushd+popd

      - cd 常用：
       | cd    | 进入用户主目录                                       |
       | cd ~  | 进入用户主目录                                       |
       | cd -  | 返回进入此目录之前所在的目录(即上层目录)             |
       | cd .. | 返回上级目录，若当前目录为/目录，则执行完后还在/目录 |

      - pushd+popd
        dirs -v 查看路径栈,pushd 和 popd 可以用来在多个目录之间进行切换而无需复制粘贴目录路径。它们是以栈的方式来运行。
        使用 pushd 和 popd 就可以无视 cd 了。
      - zsh 的 autojump 插件,不是内建命令,这个可以自己下去试试。

    - eval
        eval command－line
        #+BEGIN_SRC sh
          pipe="|"
          eval ls $pipe wc -l  #shell 在执行命令行之前扫描它两次
        #+END_SRC

        #+RESULTS:
* 程序返回值 
  - Shell 函数返回值的方式：return，echo
* 变量与环境变量
  - 变量 
    - 局部变量
      局部变量在脚本或命令中定义，仅在当前 shell 实例中有效。
    - [[https://wiki.archlinux.org/index.php/Environment_variables_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)][环境变量]]
    - 常用
      echo 显示某个环境变量值 echo ${PATH,HOME,SHELL}
      export 设置一个新的环境变量
      env 显示所有环境变量
      set 显示局部变量和用户环境变量。
      unset 清除变量 
      readonly 设置只读环境变量 
      source 改完配置文件了 source 一下

* Job Control
  - [[https://linux.cn/article-8451-1.html][进程的介绍]]
  - 进程的控制 
      | Ctrl+z | 可以将一个正在前台执行的任务放到后台运行，并且挂起                      |
      | cmd &  | 用在一个命令的最后，可以把这个命令转换为后台运行的任务进程。            |
      | bg     | bg %num 即可将挂起的任务进程的状态由 stopped 改为 running，仍在后台运行 |
      | fg     | fg %num 即可将挂起的任务进程转为前台执行                                |
      | disown | 创建守护进程                                                            |
* [[https://zh.wikipedia.org/wiki/GNU%E6%A0%B8%E5%BF%83%E5%B7%A5%E5%85%B7%E7%BB%84][Coreutils]](GNU 核心工具组)
  - sleep
    #+BEGIN_SRC sh
      date;
      sleep 5;
      date
    #+END_SRC

    #+RESULTS:
    | 2017 年 | 11 月 | 14 日 | 星期二 | 12:02:55 | CST |
    | 2017 年 | 11 月 | 14 日 | 星期二 | 12:03:00 | CST |
  - ls/find
    - [[https://linux.cn/article-5109-1.html][ls 示例]]

    - ls 常用
      
      | ls    | 简单显示                                                                             |
      | ls -l | 显示文件还是目录，它的大小、修改日期和时间、文件或目录的名字以及文件的属主和它的权限 |
      | ls -a | 可以看到隐藏文件                                                                     |

    - find
       基本形式：find <指定目录> <指定条件> <指定动作>
       例如：
           | find -name test.file      |
           | find /etc -name test.file |
           | find . -name 'test*' -ls  |
           | find . -type f -mmin -10  |
  - which/locate

    - which 查看可执行文件的位置
      #+BEGIN_SRC sh
          which ls
      #+END_SRC

      #+RESULTS:
      | /usr/bin/ls |
    - locate 基于数据库查找文件位置
      locate 文件
  - grep
    - 格式:grep [option] pattern file
      pattern 可能用到正则表达式(用的时候再去查吧)
      
      #+BEGIN_SRC sh
       ps -aux | grep emacs
      #+END_SRC

      #+RESULTS:
      | pittcat | 5991 | 2.7 | 3.1 | 583956 | 255924 | ? | Sl | 11:17 | 1:34 | /usr/bin/emacs | --resume-layouts |
      | pittcat | 7411 | 0.0 | 0.0 |  12632 |   2284 | ? | S  | 12:15 | 0:00 | grep           | emacs            |
  - sort+uniq(一个排序，一个去重)
    #+BEGIN_SRC sh
     sort ./sort.txt | uniq
    #+END_SRC

    #+RESULTS:
   | aa:10:1.1  |
   | bbb:20:2.2 |
   | ccc:30:3.3 |
   | eee:50:5.5 |
   | ddd:40:4.4 |


  - sed/awk(太菜了，玩不会，sed 其实还可以用一下)
    - sed 格式:sed [选项] sed 命令 输入文件
      - sed -n ’2p’/etc/passwd 打印出第 2 行
      - sed ’5 a\ 123′ /etc/passwd 在第 5 行后插入一新行，内容为 123
    - (改配置文件什么的，还是学一下 vim 吧)
      
* 管道与重定向 
  - 文件类型(ls -l)
    | 普通文件 | - |
    | 目录文件 | d |
    | 链接文件 | l |
    | 设备文件 | c |
  - 文件描述符
    - open/close
      open:打开文件 返回值：成功则返回文件描述符，出错返回-1 参数。
      close:关闭文件 返回值：调用成功返回 0 错误的返回-1
    - read/write
      read:从打开的文件中读取数据。返回值：实际读到的字节数；已读到文件尾返回 0，出错的话返回-1。
      write:向打开的文件写数据 返回值：写入成功返回实际写入的字节数，出错返回-1。
  - stdin stdout stderr(数字为标识符)
    0: stdin (Standard input) 标准输入串流(键盘输入)
    1: stdout (Standard output) 标准输出串流(输出于 Cli 视窗)
    2: stderr (Standard error) 标准错误输出串流(输出于 Cli 视窗)
  - 文件重定向(标准的输入或者输出更改成其他的方式)
    示例：
      ls /home 1>emmm.txt
      ls -tc /home 2>emmm.txt
      ls /home &>emmm.txt
      如果用>>，是添加到文件末尾
  - 管道
    操作：管道 | 操作符将的一个命令的 stdout 指向第二个命令的 stdin
      

